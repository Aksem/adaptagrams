digraph "cola::CompoundConstraint"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{cola::CompoundConstraint\n|# _primaryDim\l# _secondaryDim\l# _priority\l# _combineSubConstraints\l# _subConstraintInfo\l# _currSubConstraintIndex\l|+ CompoundConstraint()\l+ generateVariables()\l+ generateSeparationConstraints()\l+ updatePosition()\l+ toString()\l+ ~CompoundConstraint()\l+ dimension()\l+ priority()\l+ updateVarIDsWithMapping()\l+ updateShapeOffsetsForDifferent\lCentres()\land 7 more...\l# assertValidVariableIndex()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{cola::AlignmentConstraint\n|+ indicator\l+ variable\l|+ AlignmentConstraint()\l+ addShape()\l+ fixPos()\l+ unfixPos()\l+ isFixed()\l+ toString()\l+ getCurrSubConstraintAlternatives()\l+ generateVariables()\l+ generateSeparationConstraints()\l+ updatePosition()\l+ position()\l+ printCreationCode()\l+ updateShapeOffsetsForDifferent\lCentres()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcola_1_1AlignmentConstraint.html",tooltip="An alignment constraint specifies a alignment line that a set of nodes must be constrained to by an e..."];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{cola::BoundaryConstraint\n|+ position\l+ variable\l|+ BoundaryConstraint()\l+ addShape()\l+ toString()\l+ getCurrSubConstraintAlternatives()\l+ generateVariables()\l+ generateSeparationConstraints()\l+ updatePosition()\l+ printCreationCode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcola_1_1BoundaryConstraint.html",tooltip="A boundary constraint specifies a bounding line that a set of nodes must be either to the left or rig..."];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{cola::DistributionConstraint\n|+ cs\l+ indicator\l+ sep\l|+ DistributionConstraint()\l+ addAlignmentPair()\l+ setSeparation()\l+ toString()\l+ getCurrSubConstraintAlternatives()\l+ generateVariables()\l+ generateSeparationConstraints()\l+ printCreationCode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcola_1_1DistributionConstraint.html",tooltip="A distribution constraint specifies an ordered set of alignment constraints and a fixed separation re..."];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{cola::FixedRelativeConstraint\n||+ FixedRelativeConstraint()\l+ toString()\l+ getCurrSubConstraintAlternatives()\l+ generateVariables()\l+ generateSeparationConstraints()\l+ printCreationCode()\l+ updateVarIDsWithMapping()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcola_1_1FixedRelativeConstraint.html",tooltip="A fixed-relative constraint specifies that a group of nodes are constrained to be fixed in position r..."];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{cola::MultiSeparationConstraint\n|+ cs\l+ indicator\l+ sep\l+ equality\l|+ MultiSeparationConstraint()\l+ addAlignmentPair()\l+ setSeparation()\l+ toString()\l+ getCurrSubConstraintAlternatives()\l+ generateVariables()\l+ generateSeparationConstraints()\l+ printCreationCode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcola_1_1MultiSeparationConstraint.html",tooltip="A multi-separation constraint Specifies a set of horizontal or vertical equal spacing constraints bet..."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{cola::PageBoundaryConstraints\n||+ PageBoundaryConstraints()\l+ addShape()\l+ toString()\l+ getCurrSubConstraintAlternatives()\l+ generateVariables()\l+ generateSeparationConstraints()\l+ updatePosition()\l+ getActualLeftMargin()\l+ getActualRightMargin()\l+ printCreationCode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcola_1_1PageBoundaryConstraints.html",tooltip="A page boundary contraint specifies constraints that attempt to keep the given nodes within a defined..."];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{cola::SeparationConstraint\n|+ gap\l+ equality\l+ vpscConstraint\l|+ SeparationConstraint()\l+ SeparationConstraint()\l+ toString()\l+ getCurrSubConstraintAlternatives()\l+ generateVariables()\l+ generateSeparationConstraints()\l+ setSeparation()\l+ left()\l+ right()\l+ printCreationCode()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcola_1_1SeparationConstraint.html",tooltip="A separation constraint specifies a simple horizontal or vertical spacing constraint between 2 nodes ..."];
}
